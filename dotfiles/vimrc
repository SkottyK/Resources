" Scott Krulcik vimrc

" Acks:
" Originally inspired by Jake Zimmerman's vimrc  Jake: github.com/jez
" Also drew from bezi, jfrazelle, tpope
" Color scheme based on the iTerm Neutron theme, ported to vim by Joseph
" Wecker

set nocompatible

" === Package Management ===
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Appearance
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Yggdroot/indentLine'            " Display indentation levels

" File Management
Plugin 'scrooloose/nerdtree'            " File navigator sidebar
Plugin 'jistr/vim-nerdtree-tabs'        " NERDTree in all tabs
Plugin 'ctrlpvim/ctrlp.vim'             " Find files
Plugin 'vim-scripts/a.vim'              " Open alternates
Plugin 'airblade/vim-gitgutter'         " Show git diff symbols in gutter

" Code Editing
Plugin 'scrooloose/syntastic'           " Check for syntax errors
Plugin 'valloric/youcompleteme'         " Autocomplete
Plugin 'ntpeters/vim-better-whitespace' " Strip trailing whitespace
Plugin 'godlygeek/tabular'              " Align CSV files and Markdown tables
Plugin 'tpope/vim-commentary'           " Comment/Uncomment blocks
Plugin 'SirVer/ultisnips'               " Snippet engine
Plugin 'honza/vim-snippets'             " Repository of actual snippets

" Tags
Plugin 'szw/vim-tags'                   " Generate tag files
Plugin 'majutsushi/tagbar'              " Display tags in vertical split

" Syntax
Plugin 'sudar/vim-arduino-syntax'       " Arduino support
Plugin 'vim-jp/vim-cpp'                 " Improved C/C++ highlighting
Plugin 'JulesWang/css.vim'              " CSS Syntax
Plugin 'tpope/vim-git'                  " Better diff/commit highlighting
Plugin 'jez/vim-ispc'                   " Intel SPMD Program Compiler
Plugin 'pangloss/vim-javascript'        " Javascript
Plugin 'sheerun/vim-json'               " JSON, slightly different from js
Plugin 'LaTeX-Box-Team/LaTeX-Box'       " LaTeX
Plugin 'tpope/vim-liquid'               " Liquid templates
Plugin 'plasticboy/vim-markdown'        " Featureful .md support,
                                        "   must be after tabular
Plugin 'othree/nginx-contrib-vim'       " nginx configu files
Plugin 'mitsuhiko/vim-python-combined'  " Python 2 and 3 support
Plugin 'rust-lang/rust.vim'             " Rust
Plugin 'cakebaker/scss-syntax.vim'      " SCSS
Plugin 'keith/swift.vim'                " Swift!
Plugin 'tmux-plugins/vim-tmux'          " Syntax highlighting for tmux config

" Misc
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'jez/vim-superman'
Plugin 'tpope/vim-dispatch'              " Asynchronous commands

call vundle#end()
filetype plugin indent on

" === General ===
set backspace=indent,eol,start " 'stronger' backspace
set encoding=utf-8  " Encode files in UTF-8
set laststatus=2    " Always show file status
set nobackup        " Fewer annoying files
set noswapfile      " Fewer annoying files
set nowritebackup   " Fewer annoying files
set scrolloff=3     " Keeps a few lines between cursor and edge
set sidescrolloff=5 " Keeps a few columnns between cursor and edge
set showcmd         " Show multicharacter commands as they are being typed
set ttyfast         " idk but bezi claims smoother performance

" === Search ===
set hlsearch        " Highlight all search terms
set incsearch       " Apply search incrementally
set showmatch       " Shows current search result
set noignorecase    " Case sensitive as default
set smartcase       " Adaptive case sensitivity (only if ignorecase is on)

" === File completion ===
set splitright      " vsplit to the right
set fileignorecase  " Ignores case in file completion
set wildmenu        " Show potential matches above completion,
set wildmode=full   " completing the first immediately
set wildignore+=*/build/** " ignore build folders
set wildignore+=*.o " Ignore object files

" Force write readonly files using sudo
command! WS w !sudo tee %
" Exit insert mode with kj which is faster than escape
inoremap kj <ESC>
vnoremap kj <ESC>
" Allow mouse interaction
if has('mouse')
    set mouse=a
endif

" === Appearance ===
colorscheme krulcikcolor
syntax on           " Syntax highlighting
set number          " Line numbers
set ruler           " Cursor position in file
" set background=dark " Always keep a dark background
" set cursorline      " Highlights/underlines current editor line
" set cursorcolumn    " Highlights/underlines current editor column
" set cc=81           " Puts barrier line at 80 columns

" === Formatting ===
set wrap
set textwidth=79
set formatoptions=qrn1

" === Whitespace ===
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" === Keybindings ===
" Set leader to Space, with comma as a fallback and as something to display
let mapleader = ","
let g:mapleader = ","
map <space> <leader>
" Scroll-like navigation
noremap <silent> J <C-d>
noremap <silent> K <C-u>
noremap <silent> B 10b
noremap <silent> W 10w
" Tag search
noremap ? :CtrlPTag<cr>

" === Commands/Aliases ===
" Clean workspace: remove search highlights, close preview and quickfix windows
nmap <silent> <leader><space> :noh<cr>:pclose<cr>:cclose<cr>
" Toggle the sidebar for the plugin NERDTree
nmap <silent> <leader>t :NERDTreeTabsToggle<cr>
" Toggle the sidebar for the plugin tagbar
nmap <silent> <leader>b :TagbarToggle<cr>
" Toggle files with A.vim
nmap <silent> <leader>a :A<cr>
" Trim whitespace and save
nnoremap <leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR> :w<CR>
nnoremap <leader>q :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR> :wq<CR>
" Force quit
nnoremap <leader>Q :qall!<CR>
" Write file, then make
nnoremap <silent> <leader>m :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR> :w<CR>:Dispatch<CR>
" Recursive grep search, I find myself doing this a lot
nnoremap <leader>g :!grep -rn<space>
" Switch tabs with L and H like my Vimium configuration
set switchbuf=usetab
nnoremap <silent> L :tabn<cr>
nnoremap <silent> H :tabp<cr>
" Search and replace the word under the cursor
nnoremap <leader>/ *
" Format the current paragraph (most useful in markdown)
nnoremap <leader>f {)gq}
" Make navigating long, wrapped lines behave like normal lines
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$
noremap <silent> ^ g^
noremap <silent> _ g_
" Split and join lines
nnoremap <leader>J :join<cr>
nnoremap <leader>j i<cr><esc>k$
" Center search result on screen
nmap n nzz
nmap N Nzz
" Jump to the end of the line when pasting
nnoremap P p$

" === Plugin Settings ===

" Built-in vim plugins
let g:netrw_liststyle=3      " When viewing directories, show nested tree mode
let g:netrw_dirhistmax = 0   " Don't create .netrwhist files

" Airline
let g:airline_powerline_fonts=1
let g:airline_theme='murmur'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#eclim#enabled = 1

" TMUX
" If the current buffer has unsaved changes, save it before navigating away
let g:tmux_navigator_save_on_switch = 1

" Nerdtree
" Open tab pane when a directory is the first argument to vim
let g:nerdtree_tabs_open_on_console_startup=2

" Syntastic
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
let g:syntastic_java_checkers=['']
augroup mySyntastic
  au!
  " Turn off syntastic for tex files
  au FileType tex let b:syntastic_mode = "passive"
augroup END

" Auto-complete (YCM and Eclim)
set noinfercase       " Does NOT change the case of letters already typed
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
" Allows semantic completion of the Rust standard library
let g:ycm_rust_src_path = '/Users/Scott/Resources/Rust/src_copy/src'
" Makes eclim suggestions show up in YCM
let g:EclimCompletionMethod = 'omnifunc'
" Expand utlisnips snippets with a semicolon
let g:UltiSnipsExpandTrigger = "<c-b>"
let g:UltiSnipsJumpForwardTrigger = ";"
let g:UltiSnipsJumpBackwardTrigger = ":"

" IndentLine
let g:indentLine_color_term = 236
let g:indentLine_color_gui = '#303030'
let g:indentLine_char = '│'

" vim-markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_math=1
let g:vim_markdown_new_list_item_indent=4
let g:vim_markdown_toc_autofit=1
let g:vim_markdown_conceal = 0

" === Tags ===
let g:vim_tags_auto_generate=1
let g:vim_tags_use_vim_dispatch=1
" Open tag in vertical window
nmap <leader>] :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" Open tag in new tab
nmap <leader>} :tabe <CR>:exec("tag ".expand("<cword>"))<CR>
" Find callers with cscope - http://stackoverflow.com/q/19469770
function! Csc()
  " Find callers of the function under the cursor
  cscope find c <cword>
  copen
endfunction
command! Csc call Csc()
nmap <leader>[ :Csc<CR>

" Reconfigure the tagbar for latex
let g:tagbar_type_tex = {
\    'ctagstype' : 'tex',
\    'kinds' : [
\        's:sections',
\        'g:graphics:0:0',
\        'l:labels',
\        'r:refs:1:0',
\        'p:pagerefs:1:0'
\    ],
\    'sort' : 0,
\ }

" git gutter
hi clear SignColumn

" Better Whitespace
" Don't highlight whitespace in git commit messages (for diffs)...
let g:better_whitespace_filetypes_blacklist=['gitcommit']
" ... but strip it on save so that we're still safe
autocmd FileType gitcommit autocmd BufWritePre <buffer> StripWhitespace

" Command Summary
" \t = View File Tree
" \b = View Outline
" ctrl+p -> fuzzyfind -> ctrl+t = fuzzy find new tab
" :AV = Open Counterpart/Alternative
" :Tab /<exp> = align on <exp>

" === File Types ===
augroup myFiletypes
  au!

  " Markdown files
  au BufRead,BufNewFile *.md setlocal filetype=markdown
  " Treat all .tex files as latex
  au BufRead,BufNewFile *.tex setlocal filetype=tex
  " LaTeX class files
  au BufRead,BufNewFile *.cls setlocal filetype=tex
  " Gradle files
  au BufRead,BufNewFile *.gradle setlocal filetype=groovy
  " gitconfig files
  au BufRead,BufNewFile gitconfig setlocal filetype=gitconfig
  " html Files
  au BufRead,BufNewFile html setlocal filetype=html

  " Turn on spell checking and 80-char lines by default for these filetypes
  au FileType pandoc,markdown,tex setlocal spell
  au FileType pandoc,markdown,tex setlocal tw=80

  " Use table of contents instead of tagbar for markdown
  au FileType markdown map <buffer> <silent> <leader>b :Toc<cr>

  " Always use tabs
  au FileType gitconfig setlocal noexpandtab
  au FileType go setlocal noexpandtab

  " Custom compilers used with tpope/vim-dispatch
  au FileType rust let b:dispatch = 'cargo run'
  au FileType java let b:dispatch = 'gradle run'

  " Smaller html indentation
  au FileType html setlocal tabstop=2
  au FileType html setlocal shiftwidth=2
augroup END

" === Optional (Plugin) ===
" Uncomment to open tagbar automatically whenever possible
" autocmd BufEnter * nested :call tagbar#autoopen(0)
" rust-vim
" Automatically formats Rust files on save
"let g:rustfmt_autosave = 1
set clipboard=unnamed

