" Scott Krulcik vimrc
"
" Acks:
" Originally inspired by Jake Zimmerman's vimrc  Jake: github.com/jez
" Also drew from bezi, jfrazelle, tpope

set nocompatible

" === Package Management ===
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" Appearance
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" File Management
Plugin 'scrooloose/nerdtree'            " File navigator sidebar
Plugin 'jistr/vim-nerdtree-tabs'        " NERDTree in all tabs
Plugin 'airblade/vim-gitgutter'         " Show git diff symbols in gutter
Plugin 'rking/ag.vim'                   " Search ability
Plugin 'tpope/vim-fugitive'             " Git Utilities
" Code Editing
Plugin 'scrooloose/syntastic'           " Check for syntax errors
Plugin 'valloric/youcompleteme'         " Autocomplete
Plugin 'SirVer/ultisnips'               " Snippet engine
Plugin 'skrulcik/vim-snippets'          " Repository of actual snippets
Plugin 'ntpeters/vim-better-whitespace' " Strip trailing whitespace
Plugin 'godlygeek/tabular'              " Align CSV files and Markdown tables
Plugin 'tpope/vim-commentary'           " Comment/Uncomment blocks
" Tags
Plugin 'xolox/vim-misc'                 " Used by easy-tags
Plugin 'xolox/vim-easytags'             " Generates tag files
Plugin 'majutsushi/tagbar'              " Display tags in vertical split
" Syntax
Plugin 'sudar/vim-arduino-syntax'       " Arduino support
Plugin 'vim-jp/vim-cpp'                 " Improved C/C++ highlighting
Plugin 'JulesWang/css.vim'              " CSS Syntax
Plugin 'tpope/vim-git'                  " Better diff/commit highlighting
Plugin 'jez/vim-ispc'                   " Intel SPMD Program Compiler
Plugin 'pangloss/vim-javascript'        " Javascript
Plugin 'sheerun/vim-json'               " JSON, slightly different from js
Plugin 'tpope/vim-liquid'               " Liquid templates
Plugin 'plasticboy/vim-markdown'        " Featureful .md support,
                                        "   must be after tabular
Plugin 'othree/nginx-contrib-vim'       " nginx configu files
Plugin 'mitsuhiko/vim-python-combined'  " Python 2 and 3 support
Plugin 'rust-lang/rust.vim'             " Rust
Plugin 'cakebaker/scss-syntax.vim'      " SCSS
Plugin 'keith/swift.vim'                " Swift!
Plugin 'tmux-plugins/vim-tmux'          " Syntax highlighting for tmux config
Plugin 'KeitaNakamura/tex-conceal.vim'  " LaTeX conceal extension

" Misc
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'jez/vim-superman'                " Jakes manpage viewer
Plugin 'tpope/vim-dispatch'              " Asynchronous commands like Make
Plugin 'xuhdev/vim-latex-live-preview'   " Live preview for LaTeX
Plugin 'merlinrebrovic/focus.vim'        " Centers text in the middle of the window

call vundle#end()
filetype plugin indent on

" === General ===
set backspace=indent,eol,start " 'stronger' backspace
set encoding=utf-8  " Encode files in UTF-8
set laststatus=2    " Always show file status
set nobackup        " Fewer annoying files
set noswapfile      " Fewer annoying files
set nowritebackup   " Fewer annoying files
set scrolloff=3     " Keeps a few lines between cursor and edge
set sidescrolloff=5 " Keeps a few columnns between cursor and edge
set showcmd         " Show multicharacter commands as they are being typed
set ttyfast         " idk but bezi claims smoother performance
set conceallevel=0  " Only conceal on demand
set cursorline      " Highlight the line the cursor is on
if has('mouse')     " Allow mouse interaction
    set mouse=a
endif

" === Search ===
set hlsearch        " Highlight all search terms
set incsearch       " Apply search incrementally
set showmatch       " Shows current search result
set noignorecase    " Case sensitive as default
set smartcase       " Adaptive case sensitivity (only if ignorecase is on)

" === File completion ===
set splitright      " vsplit to the right
set fileignorecase  " Ignores case in file completion
set wildmenu        " Show potential matches above completion,
set wildmode=full   " completing the first immediately
set wildignore+=*/build/** " ignore build folders
set wildignore+=*.o        " Ignore object files
set wildignore+=*/_site/** " Ignore Jekyll site folders

" === Appearance ===
syntax enable
set bg=dark " Once you go black...
set number          " Line numbers
colorscheme krulcikcolor
" Identify the highlight region below the cursor
" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

" === Formatting ===
set wrap
set textwidth=79
set formatoptions=croqn1j

" === Whitespace ===
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" === Editor Keybindings ===
" Exit insert mode with kj which is faster than escape
inoremap kj <ESC>
" Scroll-like navigation
noremap <silent> J <C-d>
noremap <silent> K <C-u>
" Switch tabs with L and H like my Vimium configuration
set switchbuf=usetab
nnoremap <silent> L :tabn<cr>
nnoremap <silent> H :tabp<cr>
nnoremap <BS> <C-^>
" Set leader to Space, with comma as a fallback and as something to display
let mapleader = ","
let g:mapleader = ","
map <space> <leader>
" Force quit
nnoremap <leader>Q :qall!<cr>
nnoremap <leader>W :wqall!<cr>
command! WS w !sudo tee %
" Trim whitespace and save
nnoremap <leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<cr> :w<cr>
nnoremap <leader>q :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<cr> :wq<cr>
" Clean workspace: remove search highlights, close preview and quickfix windows
nmap <silent> <leader><space> :noh<cr>:pclose<cr>:cclose<cr>:NERDTreeTabsClose<cr>
" Force write readonly files using sudo
" Make navigating long, wrapped lines behave like normal lines
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$
noremap <silent> ^ g^
noremap <silent> _ g_
" Yank and paste to end of line
nnoremap P $p

" === Search Keybindings ===
" Recursive grep search, I find myself doing this a lot
nnoremap <leader>g :!grep -rn<space>
" Search and replace the word under the cursor
nnoremap <leader>/ *
" Center search result on screen
nmap n nzz
nmap N Nzz

" === Formatting Keybindings ===
" Format the current paragraph (most useful in markdown)
nnoremap <leader>f gq}
" Split and join lines (join remapped from J)
nnoremap <leader>J :join<cr>
nnoremap <leader>j i<cr><esc>k$

" === Plugin Keybindings ===
" Toggle the sidebar for the plugin NERDTree
nmap <silent> <leader>t :NERDTreeTabsToggle<cr>
" Toggle the sidebar for the plugin tagbar
nmap <silent> <leader>b :TagbarToggle<cr>
" Toggle files with A.vim
nmap <silent> <leader>a :A<cr>
" Tag search
nnoremap ? :CtrlPTag<cr>
" Write file, then make
nnoremap <silent> <leader>m :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<cr> :w<cr>:Dispatch<cr>

" === Plugin Settings ===

" Built-in vim plugins
let g:netrw_liststyle=3      " When viewing directories, show nested tree mode
let g:netrw_dirhistmax = 0   " Don't create .netrwhist files

" Airline
let g:airline_theme='murmur'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#hunks#non_zero_only = 1

" TMUX
" If the current buffer has unsaved changes, save it before navigating away
let g:tmux_navigator_save_on_switch = 1

" Nerdtree
" Open tab pane when a directory is the first argument to vim
let g:nerdtree_tabs_open_on_console_startup=2

" Syntastic
let g:syntastic_error_symbol = 'E'
let g:syntastic_warning_symbol = 'W'
augroup mySyntastic
  au!
  " Turn off syntastic for tex files
  au FileType tex let b:syntastic_mode = "passive"
augroup END

" Auto-complete and snippets
set noinfercase       " Does NOT change the case of letters already typed
let g:UltiSnipsExpandTrigger = "<c-b>"
let g:UltiSnipsJumpForwardTrigger = ";"
let g:UltiSnipsJumpBackwardTrigger = "<c-b>"

" IndentLine
let g:indentLine_color_term = 236
let g:indentLine_setColors = 0
let g:indentLine_char = '|'

" rust-vim
let g:rustfmt_autosave = 1

" vim-markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_math=1
let g:vim_markdown_new_list_item_indent=4
let g:vim_markdown_toc_autofit=1
let g:vim_markdown_conceal=0

" focus blended with CoderWall easy focus mode
function! ToggleFocusMode()
  if (&foldcolumn != 0)
    set laststatus=2
    set ruler
    set cursorline
    execute 'colorscheme ' . g:colors_name
  else
    set laststatus=0
    set noruler
    set nocursorline
    hi FoldColumn ctermbg=none
    hi NonText ctermfg=0 ctermbg=none
    hi LineNr ctermfg=0 ctermbg=none
    hi CursorLineNr ctermfg=0 ctermbg=none
  endif
  execute "normal \<Plug>FocusModeToggle"
endfunc
" Toggle focus mode
let g:focus_use_default_mapping = 0
nmap <silent> <leader>s :call ToggleFocusMode()<cr>

" === Tags ===
" Open tag in vertical window
nmap <leader>] :vsp <cr>:exec("tag ".expand("<cword>"))<cr>
" Open tag in new tab
nmap <leader>} :tabe <cr>:exec("tag ".expand("<cword>"))<cr>
" === xolox/vim-easytags settings ===
set tags=./tags;,~/.vimtags
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_include_members = 1
let g:easytags_resolve_links = 1
let g:easytags_syntax_keyword = 'always' " Sacrifice accuracy for speed

" git gutter
hi clear SignColumn

" Better Whitespace
" Don't highlight whitespace in git commit messages (for diffs)...
let g:better_whitespace_filetypes_blacklist=['gitcommit']
" ... but strip it on save so that we're still safe
autocmd FileType gitcommit autocmd BufWritePre <buffer> StripWhitespace

" commentary: Add {Oca,S}ML support
autocmd BufRead,BufNewFile *.ml setlocal commentstring=(*\ %s\ *)

" === File Types ===
augroup myFiletypes
  au!

  " Markdown files
  au BufRead,BufNewFile *.md setlocal filetype=markdown
  " Treat all .tex files as latex
  au BufRead,BufNewFile *.tex setlocal filetype=tex
  " LaTeX class files
  au BufRead,BufNewFile *.cls setlocal filetype=tex
  " Gradle files
  au BufRead,BufNewFile *.gradle setlocal filetype=groovy
  " gitconfig files
  au BufRead,BufNewFile gitconfig setlocal filetype=gitconfig
  " html Files
  au BufRead,BufNewFile html setlocal filetype=html
  " log files, which usually have long lines
  au BufRead,BufNewFile *.log setlocal nowrap

  " Turn on spell checking and 80-char lines by default for these filetypes
  au FileType pandoc,markdown,tex setlocal spell
  au FileType pandoc,markdown,tex setlocal formatoptions+=t
  au FileType gitcommit setlocal formatoptions=

  " Increase line length for Java
  au FileType java setlocal textwidth=99

  " Use table of contents instead of tagbar for markdown
  au FileType markdown map <buffer> <silent> <leader>b :Toc<cr>

  " Always use tabs
  au FileType gitconfig setlocal noexpandtab
  au FileType go setlocal noexpandtab

  " Custom compilers used with tpope/vim-dispatch
  au FileType rust let b:dispatch = 'cargo run'
  au FileType java let b:dispatch = 'gradle run'
augroup END

" Disable LaTeX conceal - may be re-enabled below
let g:tex_conceal = ""

" Eclim is heavyweight and I only want to use it occasionally
function SetEclimOptions()
    let g:airline#extensions#eclim#enabled = 1
    let g:EclimCompletionMethod = 'omnifunc'
    let g:syntastic_java_checkers=['']
    let g:EclimLoggingDisabled = 1
    augroup mbpFiletypes
        au!
        au FileType java nnoremap <leader>c :JavaCorrect<cr>
        au FileType java nnoremap <leader>i :JavaImport<cr>
        au FileType java nnoremap <leader>I :JavaImportOrganize<cr>
        au FileType java nnoremap <leader>] :JavaSearch<cr>
        au FileType java nnoremap <leader>} :JavaDocSearch<cr>
    augroup END
    command -nargs=? Dictionary call eclim#web#WordLookup(
      \ 'http://dictionary.reference.com/search?q=<query>', '<args>')
endfunction

" OCaml editing is only wanted on certain hosts OCaml Editing
function SetOCamlOptions()
    let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
    execute "set rtp+=" . g:opamshare . "/merlin/vim"
    let g:syntastic_ocaml_checkers = ['merlin']
endfunction

" SSH seems to have trouble with non-ascii characters
function SetNonASCII()
    let g:indentLine_char = '│'
    let g:indentLine_concealcursor = ''
    let g:syntastic_error_symbol = '✘'
    let g:syntastic_warning_symbol = "▲"
endfunction

" Certain features should only be used on high performance machines
function SetHighPerformance()
    let g:easytags_syntax_keyword = 'auto'
endfunction

function SetFuzzyFind()
    set rtp-=~/.vim/bundle/ctrlp.vim
    set rtp+=/usr/local/opt/fzf
    " TODO Better FZF tag search
    unmap ?
    nnoremap <C-p> :FZF<cr>
endfunction

function TexConceal()
    " Set LaTeX conceal to conceal everything
    let g:vim_markdown_conceal=2
    au FileType markdown let g:tex_conceal="abdgms"
    au FileType tex let g:tex_conceal="abdgms"

    " Set conceal colors to be more like normal text
    au FileType markdown hi! link Conceal Statement
    au FileType tex hi! link Conceal Statement
endfunction

function LowPerformance()
    let g:syntastic_java_checkers=['']
endfunction

function ItalicTermFonts()
    highlight Comment cterm=italic

    " Allow markdown to use terminal bold and italic, and darken the plain text
    " somewhat so the bold really stands out
    let g:vim_markdown_conceal=2

    " Add italic style to block quotes (which should already stand out a bit
    " because of krulcikcolor-md)
    highlight mkdBlockquote cterm=italic
endfunction

" === Machine-Specific Settings ===
if has("unix")
    " evince is fairly widely available and is the most well supported
    let g:livepreview_previewer = 'evince'
    if hostname() =~? ".*\.cmu\.edu"
        call SetOCamlOptions()
        " Allow YCM configurations to be loaded from my private folder
        let g:ycm_extra_conf_globlist = ['~/private/15*']
        call LowPerformance()
    endif
    if has("mac")
        " Integrate with Mac system clipboard
        set clipboard=unnamed
        " Set PDF viewer to Preview (minimal support)
        let g:livepreview_previewer = 'open -a Preview'
        if hostname() == "SKrulcik MBP"
            call SetEclimOptions()
            call SetOCamlOptions()
            call SetNonASCII()
            call SetHighPerformance()
            call SetFuzzyFind()
            call ItalicTermFonts()
            call TexConceal()
            " Powerline fonts allow for prettier displays in airline
            let g:airline_powerline_fonts = 1
            " Allow YCM configurations to be loaded from my private folder
            let g:ycm_extra_conf_globlist = ['~/Projects/*','~/.ycm_extra_conf.py','~/Google Drive/CMU/*']
            " A copy of the Rust standard libraries used for semantic
            " completion
            let g:ycm_rust_src_path = '/Users/Scott/Projects/Rust/src_copy/src'
        endif
    endif
endif

